# Centralized Logging Solution
#
# template for centralized-logging-solution
# **DO NOT DELETE**
#
# author: aws-solutions-builder@
AWSTemplateFormatVersion: 2010-09-09

Description: (SO0009s) - AWS Centralized Logging Solution, spoke accounts template (Version %%VERSION%%)

Parameters:
  # Name for ES Domain
  ESDomain:
    Description: Elasticsearch Domain Endpoint for centralized logging
    Type: String

  # ES cluster size
  ClusterSize:
    Description: Amazon ES cluster size, as deployed in primary account
    Type: String
    Default: Small
    AllowedValues:
    - Small
    - Medium
    - Large

  # Master IAM role for cross account log indexing
  MasterRole:
    Description: IAM Role Arn for cross account log indexing
    Type: String

  # Demo template for sample logs
  DemoTemplate:
    Description: Deploy demo template for sample logs?
    Type: String
    Default: 'No'
    AllowedValues:
    - 'Yes'
    - 'No'

  # VPC CIDR for sample sources
  DemoVPC:
    Description: CIDR for VPC with sample sources (Only required if you chose 'Yes' above)
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    Default: 10.250.0.0/16
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x

  # Subnet for sample web server
  DemoSubnet:
    Description: IP address range for subnet with sample web server (Only required if you chose 'Yes' above)
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    Default: 10.250.250.0/24
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x
  # Condition for China Region  
  AtChinaRegion:
    Description: Deploy the solution at China Region with specific adjustment.
    Type: String
    Default: 'Yes'
    AllowedValues:
      - 'Yes'
      - 'No'


Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Elasticsearch Configuration
      Parameters:
      - ESDomain
      - MasterRole
      - ClusterSize
    - Label:
        default: Do you want to deploy sample log sources?
      Parameters:
      - DemoTemplate
      - DemoVPC
      - DemoSubnet
    ParameterLabels:
      ESDomain:
        default: Elasticsearch Endpoint
      ClusterSize:
        default: Cluster Size
      DemoTemplate:
        default: Sample Logs
      DemoVPC:
        default: VPC CIDR for Sample Sources
      DemoSubnet:
        default: Subnet for Sample Web Server
      MasterRole:
        default: Master Account Role

Mappings:
  InstanceMap:
    send-data: {"SendAnonymousData": "Yes"}

  # Lambda source code mapping
  SourceCode:
    General:
      S3Bucket: "%%BUCKET_NAME%%"
      KeyPrefix: "%%SOLUTION_NAME%%/%%VERSION%%"

Conditions:
  DemoData: !Equals [!Ref DemoTemplate, 'Yes']
  AtChina: !Equals [!Ref AtChinaRegion, 'Yes']

Resources:
  #
  # Log Streamer and Demo resources
  # [LogStreamerRole, LogStreamer, LogStreamerInvokePermission, DemoStack]
  #
  LogStreamerRole:
    DeletionPolicy: 'Retain'
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Sub logstreamer-${AWS::Region}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource: 
                !If
                  - AtChina
                  - !Sub arn:aws-cn:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*
            - Effect: Allow
              Action:
              - sts:AssumeRole
              Resource: !Sub ${MasterRole}
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "The resource access is restricted to lambda functions. The lambda function is generated dynamically during CF execution to provide update flexibility without replacement. Adding the function name dynamically would add cyclic dependency"

  LogStreamer:
    Type: AWS::Lambda::Function
    Properties:
      Description: Centralized Logging - Lambda function to stream logs cross account on ES Domain
      Environment:
        Variables:
          # V56536055 - 10/08/2018 - better logging capabilities
          LOG_LEVEL: 'INFO' #change to WARN, ERROR or DEBUG as needed
          DOMAIN_ENDPOINT: !Sub ${ESDomain}
          MASTER_ROLE: !Sub ${MasterRole}
          SESSION_ID: !Sub ${AWS::AccountId}-${AWS::Region}
          OWNER: Spoke
          SOLUTION: SO0009s
          CLUSTER_SIZE: !Ref ClusterSize
          UUID: !Sub ${CreateUniqueID.UUID}
          ANONYMOUS_DATA: !FindInMap [InstanceMap, send-data, SendAnonymousData]
      Handler: index.handler
      Role: !Sub ${LogStreamerRole.Arn}
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "clog-indexing-service.zip"]]
      Runtime: nodejs12.x
      Timeout: 300
    Metadata:
        cfn_nag:
          rules_to_suppress:
            - id: W58
              reason: "It has permission to write CloudWatch Logs."
              
  LogStreamerInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Sub ${LogStreamer}
      Action: lambda:InvokeFunction
      Principal: !Sub logs.${AWS::Region}.amazonaws.com
      SourceAccount: !Sub ${AWS::AccountId}

  DemoStack:
    Type: AWS::CloudFormation::Stack
    Condition: DemoData
    Properties:
      Parameters:
        LogStreamerArn: !Sub ${LogStreamer.Arn}
        DemoVPCCidr: !Sub ${DemoVPC}
        DemoSubnet: !Sub ${DemoSubnet}
      TemplateURL: !Join 
        - ''
        - - 'https://'
          - !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], "reference"]]
          - '.s3.amazonaws.com/'
          - !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "centralized-logging-demo.template"]]

  #
  # Solution Helper resources
  # [SolutionHelperRole, SolutionHelper, CreateUniqueID]
  #
  SolutionHelper:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: Centralized Logging - Lambda function to generate a unique ID
      Environment:
        Variables:
          # V56536055 - 10/08/2018 - better logging capabilities
          LOG_LEVEL: 'INFO' #change to WARN, ERROR or DEBUG as needed
      Handler: index.handler
      Runtime: nodejs12.x
      Timeout: 300
      Role: !GetAtt SolutionHelperRole.Arn
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "clog-auth.zip"]]

  SolutionHelperRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource:
              !If
                - AtChina
                - !Sub 'arn:aws-cn:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-*'
                - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-*'


  CreateUniqueID:
    Type: Custom::LoadLambda
    Properties:
      ServiceToken: !GetAtt SolutionHelper.Arn
      Resource: UUID

Outputs:
  LambdaArn:
    Description: Lambda function to index logs on ES Domain
    Value: !Sub ${LogStreamer.Arn}
